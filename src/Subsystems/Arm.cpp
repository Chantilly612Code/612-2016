#include "Arm.h"
#include "RobotMap.h"
#include "Commands/Arm/ArmMove.h"


Arm::Arm() :
		Subsystem("Arm")
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	adjust = RobotMap::armAdjust;
	rotationDetect = RobotMap::armRotationDetect;
}

void Arm::InitDefaultCommand()
{
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new ArmMove());

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

float Arm::Get()
{
	return adjust->Get();
}

void Arm::Set(float x)
{
	adjust->Set(x);
	SmartDashboard::PutNumber("Arm Talon Speed", adjust->Get());
}

void Arm::SetMode(CANTalon::ControlMode mode)
{
	adjust->SetControlMode(mode);
}

/*
 * GetDegrees() is no longer maintained!
 *
 * TODO: Mark as deprecated.
 *
 */

float Arm::GetDegrees()
{
	/*SmartDashboard::PutNumber("Raw M Encoder Value", rotationDetect->GetVoltage());
	std::printf("Raw M Encoder Value: %f\n", rotationDetect->GetVoltage());

	SmartDashboard::PutNumber("M Encoder %rotation", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));
	std::printf("M Encoder %rotation: %f\n", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));*/

	return (rotationDetect->GetVoltage()/5.0f) * 360.0f;
}


void Arm::setArmPosition(float pos)
{
	//return ???
}

float Arm::getArmPosition()
{
	//returns between 0 for all the way in and 1 for all the way right
	SmartDashboard::PutNumber("Raw M Encoder Value", rotationDetect->GetVoltage());
	std::printf("Raw M Encoder Value: %f\n", rotationDetect->GetVoltage());

	SmartDashboard::PutNumber("M Encoder percent rotation", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));
	std::printf("M Encoder percent rotation: %f\n", ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS)));

	return ((rotationDetect->GetVoltage() - MIN_VOLTS)/(MAX_VOLTS - MIN_VOLTS));
}

float Arm::getMax()
{
	return MAX_VOLTS;
}

float Arm::getMin()
{
	return MIN_VOLTS;
}



